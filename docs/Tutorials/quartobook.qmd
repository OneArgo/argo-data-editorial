---
title: "Quarto Book"
format:
    html:
        css:
        - ../../assets/css/tutorialshome.css
        - ../../assets/css/_tool-chooser.css
---

{{< include ../_tool-chooser.md >}}

# Introduction

>**Quarto** is a versatile publishing system that allows you to **create** **documents**, **websites**, **books**, **blogs**, and even **interactive** **reports**. It supports a variety of **formats**, **including markdown**, **Jupyter Notebooks**, and **R Markdown**, and allows for the **execution of code** within your documents, making it an excellent tool for **data science**, **research**, and **technical documentation**.
>
>This tutorial aims to walk you through the process of **publishing a Quarto project online**. Whether you're starting a **new project** or working from an **existing repository**, we’ll guide you through the **setup**, **customization**, and **deployment** steps to ensure your content along with any embedded code is accessible and well-presented on the web.

# Instalation
## Existing Project

>In first part, we will focus on **publishing an existing documentation project** that is hosted on a repository. We will guide you through the steps necessary to take this pre-existing documentation and make it **accessible online**. By the end of this process, you will have your documentation live and ready for others to view and use.

### Your existing project

![](../../assets/images/img_quarto/files.png)

Here are all the files in our project. To publish our documentation online, we need to add the `.gitlab-ci.yml` file. This file will provide the GitLab pipeline with **instructions** to **automatically build the pages** and set up the **necessary environment**.

### ADD .gitlab-ci.yml

To add the configuration file, we will open the online IDE provided by GitLab.

![](../../assets/images/img_quarto/openwebide.png)

:::::: {.columns}
::: {.column width="50%"}

Once the IDE is open, you should see the list of files and directories that make up your project.

![](../../assets/images/img_quarto/newfilewebide.png)

:::

::: {.column width="10%"}
:::

::: {.column width="40%"}

At the root of this project, we will create the .gitlab-ci.yml file.

![](../../assets/images/img_quarto/newfilename.png)

:::
:::

### ADD .gitlab-ci.yml's content

Once the file is created, you need to add the following code:

```{python}
#| eval: false
---
include:
    - project: dev-ops/templates/automatisation/ci-cd
      ref: main
      file: /templates/pipeline-documentation-quarto.yml

variables:
  DOCUMENTATION_PYTHON_REQUIREMENTS: "requirements.txt"
```

### Update the repository

Once the content is added, simply push the changes to update the repository.

![](../../assets/images/img_quarto/commitandpush.png)

Now our repository is up to date! We can see our `.gitlab-ci.yml` file.

![](../../assets/images/img_quarto/files2.png)

### Pipelines

Once our repository is updated, GitLab will interpret our file and execute the configured steps. We can monitor the successful execution of these steps through the pipelines, which will run automatically.

In our case, the pipeline will create an environment, install dependencies, build our Quarto Book, and finally, publish our book.

:::::: {.columns}
::: {.column width="20%"}

![](../../assets/images/img_jupyter/menupipeline.png)

:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

![](../../assets/images/img_quarto/runningpipeline.png)

:::
:::

After about 2-3 minutes, the pipeline should be complete. We can check the visual indicators to confirm its successful execution.

![](../../assets/images/img_quarto/donepipeline.png)

### Gitlab pages

if the pipeline execution encountered no errors, our Quarto Book has been successfully published. We can now verify that it is online by visiting the book via the link provided by GitLab Pages.

![](../../assets/images/img_quarto/pages.png)

By clicking on GitLab Pages, you should be redirected to your published book. For more settings related to the creation of the URL, you can navigate to the GitLab Pages section from the side menu.

:::::: {.columns}
::: {.column width="20%"}

![](../../assets/images/img_jupyter/menupages.png)

:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

![](../../assets/images/img_quarto/pagesurl.png)

:::
:::

## New Project Clone From Template Quarto GitLab

>The goal is to **publish a Quarto book starting from a project that doesn’t yet exist**. We’ll go through how to get a **Quarto book template**, **create a personal GitLab project**, add this new book to your GitLab project, and **publish** **it**.

### Open a new Terminal

There is two ways to open a new terminal on a Linux computer.

Use the shortcut :

```{python}
#| eval: false
Ctrl + Alt + T
```

OR

![](../../assets/images/terminal.png)

### Create a new project on Gitlab

The first step before pull the Quarto book template is to **create a new personnal gitlab project**.
You will stock in it your documentation.

From this URL : <https://gitlab.ifremer.fr/>

:::::: {.columns}
::: {.column width="45%"}

![](../../assets/images/quarto_pulltemplate/Capture%20d%E2%80%99%C3%A9cran%20du%202024-10-28%2010-50-34.png)

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}


![](../../assets/images/quarto_pulltemplate/Capture%20d%E2%80%99%C3%A9cran%20du%202024-10-28%2010-50-45.png)

:::
:::

---

![](../../assets/images/quarto_pulltemplate/Capture%20d%E2%80%99%C3%A9cran%20du%202024-10-28%2010-58-56.png)

---

On this page, enter your **project name** and chose your **users name** or a **group** where you want your documentation to be.

![](../../assets/images/quarto_pulltemplate/Capture%20d%E2%80%99%C3%A9cran%20du%202024-10-28%2010-59-28.png)

When you are ready you can **create your project**.

---

![](../../assets/images/quarto_pulltemplate/Capture%20d%E2%80%99%C3%A9cran%20du%202024-10-28%2011-00-02.png)

### Clone the Quarto book template

In your **terminal**, you should be at your **home directory**.

From here :

```{python}
#| eval: false
ls
```

![](../../assets/images/quarto_pulltemplate/Capture%20d%E2%80%99%C3%A9cran%20du%202024-10-28%2011-36-13.png)

You will **create** a folder where to clone the template and where your **future documentation will be**.

```{python}
#| eval: false
cd ./Documents
mkdir Documentations
cd ./Documentations
```

Now you are in your **project folder**. You have to clone the template.

```{python}
#| eval: false
git clone https://gitlab.ifremer.fr/dev-ops/templates/project/docs-quartobook.git
```

```{python}
#| eval: false
cd ./docs-quartobook
```

Once your are in the **root of the directory** where your template files are located, we need to change the **URL of the target GitLab project** to match the **new project** you created earlier.

![](../../assets/images/quarto_pulltemplate/Capture d’écran du 2024-10-28 11-00-02.png)

We can check the **current URL** by typing the following command: `git remote -v`, which will show that it points to the **template project**. Therefore, we need to enter the following command:

```{python}
#| eval: false
git remote set-url origin [https://gitlab.ifremer.fr/user/our-document-url]
```

After entering this command, we can verify that the URL is correct by typing:

```{python}
#| eval: false
git remote -v
```

Once we have changed our target URL, we need to **create a branch** to add the content of the Quarto book template to our remote project. To do this, we should use the following command:

```{python}
#| eval: false
git checkout -b "feature/add_content"
```

Next, we simply **push** the content using the following command:

```{python}
#| eval: false
git push --set-upstream origin feature/add_content
```

After executing this command, a **merge request** will be created for our project. We then need to go and accept this merge request to finalize the **upload of the content** to our remote project.

![](../../assets/images/quarto_pulltemplate/merge1.png)

Once the required information is provided, **create the merge**.

![](../../assets/images/quarto_pulltemplate/merge2.png)

::: {.callout-important collapse="true"}
## Merge Blocked:

Your merge may be **blocked** due to conflicts. Until these conflicts are resolved, the merge cannot proceed. Simply click on **"Resolve conflicts"** to address them.

![](../../assets/images/quarto_pulltemplate/merge3.png)

To resolve conflicts, you’ll need to **accept** one version of the changes. We will choose the **"Use theirs"** option, as these changes are the ones we want to push to our project.
Once selected, the conflict will be resolved, and the **merge** should be **unblocked**.

:::

Once the **merge** is **ready**, simply finalize the branch merge.

![](../../assets/images/quarto_pulltemplate/merge5.png)

Once the branch merge is **complete**, the **jobs** **will** **launch** **automatically**. This is a **series of actions** that will **publish** your documentation.
This process should take **2-3 minutes**, and you don’t need to do anything.

![](../../assets/images/quarto_pulltemplate/pipeline1.png)

Here is the result after a **2-3 minutes** wait :

![](../../assets/images/quarto_pulltemplate/pipelineé.png)

The various **stages** have **completed** **successfully**. We will now verify that our **documentation** is **online**.

By clicking on **GitLab** **Pages**, you should be redirected to your **published** **book**.

![](../../assets/images/quarto_pulltemplate/pages.png)

For more settings related to the creation of the **URL**, you can navigate to the GitLab Pages section from the side menu.

:::::: {.columns}
::: {.column width="20%"}

![](../../assets/images/img_jupyter/menupages.png)

:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

![](../../assets/images/quarto_pulltemplate/pagesurl2.png)

:::
:::

# Quarto-book' Structure

```
.
├── assets
│   └── images
│       ├── favicon.ico
│       └── logo.png
|   └── css
|       └── main.css
├── docs
│   ├── firstPart
│   │   └── markdown.qmd
│   ├── secondPart
|   |   ├── advancedcodeblock.qmd
│   │   └── codeblock.qmd
│   └── references.qmd
├── index.qmd
├── _quarto.yml
├── .gitignore
├── .gitlab-ci.yml
├── references.bib
└── requirements.txt
```

## assets

```
.
├── assets
│   └── images
│       ├── favicon.ico
│       └── logo.png
|   └── css
|       └── main.css
[...]
```

>the `assets` directory serves as the main storage location for media.
>It contains one subdirectorie:

- **images**: This folder holds all the `image files` used in the project. Any **visual elements** that need to be displayed within the notebook or across the project are stored here.

- **css**: This folder contains custom Cascading Style Sheets (CSS) for **styling** your project. The `main.css` file can be used to override **default styles**, such as **fonts**, **colors**, **margins**, and **layout**, to customize the appearance of your Quarto project.

## docs

```
[...]
├── docs
│   ├── firstPart
│   │   └── markdown.qmd
│   ├── secondPart
|   |   ├── advancedcodeblock.qmd
│   │   └── codeblock.qmd
│   └── references.qmd
[...]
```

> The `docs` directory serves as the **main content repository** for the project, housing all the **pages** and **sections** that make up the website or documentation. This directory contains the following elements:

- **firstPart** and **secondPart**: These subdirectories represent different **sections** or **parts** of the project, and they contain the **pages relevant** to each part. Each subdirectory organizes related content, making it easier to **structure** and **navigate** through the project.

- **references.qmd**: this file in a Quarto project is typically used to **manage** and **display bibliographic references** and **citations** within the project. It is essential when you're working on a **research-based document**, such as a **book**, **report**, or **academic** **paper**, where citing sources is required.

The docs directory can include files in various formats, primarily `.md`(Markdown), `.ipynb` (Jupyter Notebook) and `qmd` (Quarto Markdown). These files make up the different pages of the web-based project, whether in **text** form or **including code** and outputs from notebooks. In a quarto project, the principal file format to use is `.qmd`.

This directory ensures that all the content displayed on the website is **well-organized** and **easily** accessible.

## index.qmd

```
├── index.qmd

```

>It is key markdown files. `intro.qmd` typically serves as the introduction page of the project.
>
>The `intro.qmd` file must be placed at the **root of the project**. Without this, the root file **cannot be located** within the Quarto organization. The configuration of the root file is specified in the `_quarto.yml` file, which we will discuss shortly.

## _quarto.yml

>This configuration file is in `YAML`, a structured data format ideal for **configuration files**. This file will define the **main settings** for your **Quarto book project**.

### project

```yaml
project:
  type: book
```

This line defines the **project type** as a **book**. Quarto supports several **types of projects**, like **website**, **article**, and **book**. Here, type: book specifies that the project will be **assembled as a book** with a **table of contents** and **organized chapters**.

### Title and Author

The book section holds the **main information** about the book.
**title**, **favicon**, **author**, **date**

```yaml
title: My First Quarto Book
favicon: ./assets/images/favicon.png
author: Norah Jones
date: 09/10/2024
```

- **title**: The book's title, usually appearing on the cover and in the browser’s title bar.

- **favicon**: Path to an icon (here ./assets/images/favicon.png) to display in the browser tab.

- **author**: The book’s author, here Norah Jones.

- **date**: Publication date, useful for showing the last updated date.


### sidebar

```yaml
sidebar:
  logo: ./assets/images/quartologo.png
  title: "My first quarto book"
```

- **logo**: An image to display in the sidebar, often a logo for the project or book.

- **title**: The title appearing in the sidebar, which could be the full book title or a shortened version.

### chapters

```yaml
chapters:
  - index.qmd
  - part: "First Part"
    chapters:
    - docs/firstPart/markdown.qmd
  - part: "Second Part"
    chapters:
    - docs/secondPart/codeblock.qmd
    - docs/secondPart/advancedcodeblock.qmd
  - docs/references.qmd
```

This section organizes **the book’s content**.
Basic Structure

>**Chapters** are listed in an array format with .qmd files (Quarto Markdown files).
>
>**Chapters** appear in the order listed.

Explanation of Elements

- **index.qmd**: The book's **index** or **homepage file**, often placed first.

- **part**: "First Part": part allows grouping chapters under a section. Here, "First Part" contains one chapter: markdown.qmd.

- **chapters**: Specific chapters for each part. Each .qmd file represents a chapter in that part.

- **docs/references.qmd**: A references chapter, typically containing the book’s bibliography.

### bibliography

```yaml
bibliography: references.bib
```

This line specifies the **bibliography** file in **BibTeX** format (here, references.bib) containing references you can cite within the book.

### format Section

The format section defines the book’s appearance settings : **html**

```yaml
html:
  theme: default
  css: assets/css/main.css
```

- **theme**: The book’s **main theme** (here, default). Quarto offers several themes (like **cosmo**, **journal**, **flatly**, etc.).
- **css**: Path to a custom CSS file for styling the book.

## .gitlab-ci.yml

```
├── .gitlab-ci.yml
```

>The `.gitlab-ci.yml` file is a configuration file used for **GitLab CI/CD pipelines**. It defines the instructions for how your project will be **built**, **tested**, and **deployed**. Here’s a breakdown of the contents of this specific file:

- **include**: This section allows you to include **external configuration templates** from other projects.

- **variables**: This section is used to define **environment variables** that can be used throughout the CI/CD pipeline. In this file, the variable DOCUMENTATION_PYTHON_REQUIREMENTS is set to "requirements.txt", indicating the file that contains the Python package requirements needed to build the documentation.

::: {.callout-warning title="Important"}
This file should **not be modified**, as any changes could disrupt the build and deployment process of the book online. It is crucial to maintain its integrity to ensure that the CI/CD pipeline operates correctly.
:::

By using this configuration file, you can **automate** tasks related to your Quarto Book project, such as **installing** **dependencies**, **building** the **documentation**, and **deploying** it to a **server or hosting service**.

## references.bib

```
├── references.bib
```

>The `references.bib` file is a BibTeX file used to manage citations for your Quarto Book project. It contains bibliographic entries for various academic works, allowing you to cite these sources throughout your book easily.

::: {.callout-note collapse="true"}
## More about references.bib structure:
- Bibliographic Entry Structure: Each entry in the file represents a different source and follows a specific format. For example, here’s an entry for a journal article:

```bibtex
@article{knuth84,
  author = {Knuth, Donald E.},
  title = {Literate Programming},
  year = {1984},
  issue_date = {May 1984},
  publisher = {Oxford University Press, Inc.},
  address = {USA},
  volume = {27},
  number = {2},
  issn = {0010-4620},
  url = {https://doi.org/10.1093/comjnl/27.2.97},
  doi = {10.1093/comjnl/27.2.97},
  journal = {Comput. J.},
  month = may,
  pages = {97–111},
  numpages = {15}
}

```

- Key Components of the Entry:

- **@article**: This indicates the type of the bibliographic entry (in this case, an article).

- **author**: The author of the work.

- **title**: The title of the article.

- **year**: The year of publication, 1984, indicating when this influential work was released.

- **issue_date**: The specific issue date of the journal in which the article was published.

- **publisher**: The organization responsible for publishing the article.

- **address**: The location of the publisher.

- **volume**: The volume number of the journal in which the article appears, which is 27 in this case.

- **number**: The issue number within the specified volume.

- **issn**: The International Standard Serial Number (ISSN) for the journal.

- **url**: The direct link to the article, providing online access to its content (https://doi.org/10.1093/comjnl/27.2.97).

- **doi**: The Digital Object Identifier (DOI), a unique alphanumeric string assigned to the article for permanent identification (10.1093/comjnl/27.2.97).

- **journal**: The name of the journal where the article was published.

- **month**: The month of publication.

- **pages**: The page range of the article within the journal, from pages 97 to 111.

- **numpages**: The total number of pages in the article.
:::

The `references.bib` file plays a crucial role in ensuring that all academic references are well-organized and easily accessible for citation throughout your Jupyter Book project. When you reference an entry in your content, it will automatically format the citation according to the specified style.

## requirements.txt

```
└── requirements.txt
```

In Python projects, there are several files that can be used to **manage dependencies**, each serving different purposes and working with different tools. While your project might only use **requirements.txt**, it is important to also understand other files like **environment.yaml** and **pyproject.toml**, as you might encounter them in other contexts. Below is an explanation of these three files.

### requirements.txt

>The `requirements.txt` file is a standard file used in Python projects to specify the **dependencies required** to run the project. This file lists all the external libraries and packages that need to be installed to ensure that your **Quarto Book functions correctly**.

::: {.callout-note collapse="true"}
## More about requirements.txt structure:
Below is a simple explanation of the contents of this specific file:

- **Dependencies**: Each line in the requirements.txt file represents a **package** that your **project** **requires**. Here’s an example of what the content might look like:

```rust
jupyter-book
matplotlib
numpy
ipyleaflet
plotly
pandas
```

**Key Packages Explained**:

- **jupyter-book**: The primary package needed to build and publish the Jupyter Book.

- **matplotlib**: A widely-used plotting library for creating static, animated, and interactive visualizations in Python.

- **numpy**: A fundamental package for numerical computing in Python, essential for handling arrays and performing mathematical operations.

- **ipyleaflet**: A library that provides interactive maps for Jupyter notebooks, useful for geographical data visualization.

- **plotly**: A graphing library that makes interactive plots, dashboards, and web applications.

- **pandas**: A powerful data manipulation and analysis library that provides data structures like DataFrames.
:::

### environment.yaml

>In contrast to `requirements.txt`, which is used with pip, the environment.yaml file is used with **conda**, another popular Python **environment manager**, especially in data science.

::: {.callout-note collapse="true"}
## More about environment.yaml structure:
Below is a simple explanation of the contents of this specific file:

```rust
name: my_environment
channels:
  - defaults
  - conda-forge
dependencies:
  - python=3.9
  - jupyter-book
  - matplotlib
  - numpy
  - ipyleaflet
  - plotly
  - pandas
  - pip
  - pip:
    - some-pip-only-package
```

**Key Packages Explained**:

- **name**: The name of the conda environment.

- **channels**: Specifies where conda will look for packages.

- **dependencies**: A list of dependencies to install, including both Python libraries and other non-Python tools.

- **pip**: If some dependencies are not available through conda, they can be installed via pip inside the file.
:::

### pyproject.toml

>The `pyproject.toml` file is a new method introduced by PEP 518 to define the **metadata and dependencies of a Python project**, especially for projects that use modern build tools like **Poetry** or **Flit**.

::: {.callout-note collapse="true"}
## More about pyproject.toml structure:
Below is a simple explanation of the contents of this specific file:

```rust
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "my_project"
version = "0.1.0"
description = "A Python project."
authors = ["Author <author@example.com>"]

[tool.poetry.dependencies]
python = "^3.9"
jupyter-book = "^0.11"
matplotlib = "^3.4"
numpy = "^1.21"
ipyleaflet = "^0.14"
plotly = "^5.0"
pandas = "^1.3"

[tool.poetry.dev-dependencies]
pytest = "^6.2"
black = "^21.7b0"
```

**Key Packages Explained**:

- **[build-system]**: Defines the required build tools, such as **setuptools** and **wheel**.

- **[tool.poetry]**: Information about the project, including the name, version, and authors.

- **[tool.poetry.dependencies]**: List of dependencies required to run the project.

- **[tool.poetry.dev-dependencies]**: List of dependencies required for development (testing, linting, etc.).
:::

### **Comparison of `requirements.txt`, `environment.yaml`, and `pyproject.toml` Files:**

| Feature                  | `requirements.txt`       | `environment.yaml`  | `pyproject.toml`   |
|--------------------------|--------------------------|---------------------|--------------------|
| **Manager**              | pip                      | conda               | Poetry/Flit        |
| **Environment**          | Python                   | Multi-language      | Python             |
| **Version Support**      | Yes, manual              | Yes, precise        | Yes, automatic     |
| **Channel Usage**        | No                       | Yes (conda-forge)   | No                 |
| **Dev Dependencies**     | No, requires another file| Yes                 | Yes                |
