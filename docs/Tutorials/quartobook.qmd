---
title: "Quarto Book"
---

# Introduction

**Quarto** is a versatile publishing system that allows you to **create** **documents**, **websites**, **books**, **blogs**, and even **interactive** **reports**. It supports a variety of **formats**, **including markdown**, **Jupyter Notebooks**, and **R Markdown**, and allows for the **execution of code** within your documents, making it an excellent tool for **data science**, **research**, and **technical documentation**.

This tutorial aims to walk you through the process of **publishing a Quarto project online**. Whether you're starting a **new project** or working from an **existing repository**, we’ll guide you through the **setup**, **customization**, and **deployment** steps to ensure your content—along with any embedded code—is accessible and well-presented on the web.

# Instalation
## Existing Project
## New Project Clone From Template Quarto GitLab

# Quarto-book' Structure

```
.
├── assets
│   └── images
│       ├── favicon.ico
│       └── logo.png
|   └── css
|       └── main.css
├── docs
│   ├── firstPart
│   │   └── markdown.qmd
│   ├── secondPart
|   |   ├── advancedcodeblock.qmd
│   │   └── codeblock.qmd
│   └── references.qmd
├── index.qmd
├── _quarto.yml
├── .gitignore
├── .gitlab-ci.yml
├── references.bib
└── requirements.txt
```

## assets

```
.
├── assets
│   └── images
│       ├── favicon.ico
│       └── logo.png
|   └── css
|       └── main.css
[...]
```

>the `assets` directory serves as the main storage location for media.
>It contains one subdirectorie:

- **images**: This folder holds all the `image files` used in the project. Any **visual elements** that need to be displayed within the notebook or across the project are stored here.

- **css**: This folder contains custom Cascading Style Sheets (CSS) for **styling** your project. The `main.css` file can be used to override **default styles**, such as **fonts**, **colors**, **margins**, and **layout**, to customize the appearance of your Quarto project.

## docs

```
[...]
├── docs
│   ├── firstPart
│   │   └── markdown.qmd
│   ├── secondPart
|   |   ├── advancedcodeblock.qmd
│   │   └── codeblock.qmd
│   └── references.qmd
[...]
```

> The `docs` directory serves as the **main content repository** for the project, housing all the **pages** and **sections** that make up the website or documentation. This directory contains the following elements:

- **firstPart** and **secondPart**: These subdirectories represent different **sections** or **parts** of the project, and they contain the **pages relevant** to each part. Each subdirectory organizes related content, making it easier to **structure** and **navigate** through the project.

- **references.qmd**: this file in a Quarto project is typically used to **manage** and **display bibliographic references** and **citations** within the project. It is essential when you're working on a **research-based document**, such as a **book**, **report**, or **academic** **paper**, where citing sources is required.

The docs directory can include files in various formats, primarily `.md`(Markdown), `.ipynb` (Jupyter Notebook) and `qmd` (Quarto Markdown). These files make up the different pages of the web-based project, whether in **text** form or **including code** and outputs from notebooks. In a quarto project, the principal file format to use is `.qmd`.

This directory ensures that all the content displayed on the website is **well-organized** and **easily** accessible.

## index.qmd

```
├── index.qmd

```

>It is key markdown files. `intro.qmd` typically serves as the introduction page of the project.
>
>The `intro.qmd` file must be placed at the **root of the project**. Without this, the root file **cannot be located** within the Quarto organization. The configuration of the root file is specified in the `_quarto.yml` file, which we will discuss shortly.

## _quarto.yml



## .gitlab-ci.yml

```
├── .gitlab-ci.yml
```

>The `.gitlab-ci.yml` file is a configuration file used for **GitLab CI/CD pipelines**. It defines the instructions for how your project will be **built**, **tested**, and **deployed**. Here’s a breakdown of the contents of this specific file:

- **include**: This section allows you to include **external configuration templates** from other projects.

- **variables**: This section is used to define **environment variables** that can be used throughout the CI/CD pipeline. In this file, the variable DOCUMENTATION_PYTHON_REQUIREMENTS is set to "requirements.txt", indicating the file that contains the Python package requirements needed to build the documentation.

::: {.callout-warning title="Important"}
This file should **not be modified**, as any changes could disrupt the build and deployment process of the book online. It is crucial to maintain its integrity to ensure that the CI/CD pipeline operates correctly.
:::

By using this configuration file, you can **automate** tasks related to your Quarto Book project, such as **installing** **dependencies**, **building** the **documentation**, and **deploying** it to a **server or hosting service**.

## references.bib

```
├── references.bib
```

>The `references.bib` file is a BibTeX file used to manage citations for your Quarto Book project. It contains bibliographic entries for various academic works, allowing you to cite these sources throughout your book easily.

::: {.callout-note collapse="true"}
## More about references.bib structure:
- Bibliographic Entry Structure: Each entry in the file represents a different source and follows a specific format. For example, here’s an entry for a journal article:

```bibtex
@article{knuth84,
  author = {Knuth, Donald E.},
  title = {Literate Programming},
  year = {1984},
  issue_date = {May 1984},
  publisher = {Oxford University Press, Inc.},
  address = {USA},
  volume = {27},
  number = {2},
  issn = {0010-4620},
  url = {https://doi.org/10.1093/comjnl/27.2.97},
  doi = {10.1093/comjnl/27.2.97},
  journal = {Comput. J.},
  month = may,
  pages = {97–111},
  numpages = {15}
}

```

- Key Components of the Entry:

- **@article**: This indicates the type of the bibliographic entry (in this case, an article).

- **author**: The author of the work.

- **title**: The title of the article.

- **year**: The year of publication, 1984, indicating when this influential work was released.

- **issue_date**: The specific issue date of the journal in which the article was published.

- **publisher**: The organization responsible for publishing the article.

- **address**: The location of the publisher.

- **volume**: The volume number of the journal in which the article appears, which is 27 in this case.

- **number**: The issue number within the specified volume.

- **issn**: The International Standard Serial Number (ISSN) for the journal.

- **url**: The direct link to the article, providing online access to its content (https://doi.org/10.1093/comjnl/27.2.97).

- **doi**: The Digital Object Identifier (DOI), a unique alphanumeric string assigned to the article for permanent identification (10.1093/comjnl/27.2.97).

- **journal**: The name of the journal where the article was published.

- **month**: The month of publication.

- **pages**: The page range of the article within the journal, from pages 97 to 111.

- **numpages**: The total number of pages in the article.
:::

The `references.bib` file plays a crucial role in ensuring that all academic references are well-organized and easily accessible for citation throughout your Jupyter Book project. When you reference an entry in your content, it will automatically format the citation according to the specified style.

## requirements.txt

```
└── requirements.txt
```

In Python projects, there are several files that can be used to **manage dependencies**, each serving different purposes and working with different tools. While your project might only use **requirements.txt**, it is important to also understand other files like **environment.yaml** and **pyproject.toml**, as you might encounter them in other contexts. Below is an explanation of these three files.

### requirements.txt

>The `requirements.txt` file is a standard file used in Python projects to specify the **dependencies required** to run the project. This file lists all the external libraries and packages that need to be installed to ensure that your **Quarto Book functions correctly**.

::: {.callout-note collapse="true"}
## More about requirements.txt structure:
Below is a simple explanation of the contents of this specific file:

- **Dependencies**: Each line in the requirements.txt file represents a **package** that your **project** **requires**. Here’s an example of what the content might look like:

```rust
jupyter-book
matplotlib
numpy
ipyleaflet
plotly
pandas
```

**Key Packages Explained**:

- **jupyter-book**: The primary package needed to build and publish the Jupyter Book.

- **matplotlib**: A widely-used plotting library for creating static, animated, and interactive visualizations in Python.

- **numpy**: A fundamental package for numerical computing in Python, essential for handling arrays and performing mathematical operations.

- **ipyleaflet**: A library that provides interactive maps for Jupyter notebooks, useful for geographical data visualization.

- **plotly**: A graphing library that makes interactive plots, dashboards, and web applications.

- **pandas**: A powerful data manipulation and analysis library that provides data structures like DataFrames.
:::

### environment.yaml

>In contrast to `requirements.txt`, which is used with pip, the environment.yaml file is used with **conda**, another popular Python **environment manager**, especially in data science.

::: {.callout-note collapse="true"}
## More about environment.yaml structure:
Below is a simple explanation of the contents of this specific file:

```rust
name: my_environment
channels:
  - defaults
  - conda-forge
dependencies:
  - python=3.9
  - jupyter-book
  - matplotlib
  - numpy
  - ipyleaflet
  - plotly
  - pandas
  - pip
  - pip:
    - some-pip-only-package
```

**Key Packages Explained**:

- **name**: The name of the conda environment.

- **channels**: Specifies where conda will look for packages.

- **dependencies**: A list of dependencies to install, including both Python libraries and other non-Python tools.

- **pip**: If some dependencies are not available through conda, they can be installed via pip inside the file.
:::

### pyproject.toml

>The `pyproject.toml` file is a new method introduced by PEP 518 to define the **metadata and dependencies of a Python project**, especially for projects that use modern build tools like **Poetry** or **Flit**.

::: {.callout-note collapse="true"}
## More about pyproject.toml structure:
Below is a simple explanation of the contents of this specific file:

```rust
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "my_project"
version = "0.1.0"
description = "A Python project."
authors = ["Author <author@example.com>"]

[tool.poetry.dependencies]
python = "^3.9"
jupyter-book = "^0.11"
matplotlib = "^3.4"
numpy = "^1.21"
ipyleaflet = "^0.14"
plotly = "^5.0"
pandas = "^1.3"

[tool.poetry.dev-dependencies]
pytest = "^6.2"
black = "^21.7b0"
```

**Key Packages Explained**:

- **[build-system]**: Defines the required build tools, such as **setuptools** and **wheel**.

- **[tool.poetry]**: Information about the project, including the name, version, and authors.

- **[tool.poetry.dependencies]**: List of dependencies required to run the project.

- **[tool.poetry.dev-dependencies]**: List of dependencies required for development (testing, linting, etc.).
:::

### **Comparison of `requirements.txt`, `environment.yaml`, and `pyproject.toml` Files:**

| Feature                  | `requirements.txt`       | `environment.yaml`  | `pyproject.toml`   |
|--------------------------|--------------------------|---------------------|--------------------|
| **Manager**              | pip                      | conda               | Poetry/Flit        |
| **Environment**          | Python                   | Multi-language      | Python             |
| **Version Support**      | Yes, manual              | Yes, precise        | Yes, automatic     |
| **Channel Usage**        | No                       | Yes (conda-forge)   | No                 |
| **Dev Dependencies**     | No, requires another file| Yes                 | Yes                |
