---
title: "Jupyter Notebook"
---

# Introduction

>**Jupyter Book** is a powerful tool that allows you to **create** and **publish** **interactive** content, such as **notebooks**, **code**, and **rich** **text**, all in one cohesive format. It's widely used in **data science**, **research**, and **education** for creating dynamic **documentation** and educational resources.
>
>The goal of this tutorial is to guide you through the process of **publishing a Jupyter Book online**. Whether you’re starting from an **existing project** or **cloning one from GitLab**, we’ll cover the steps necessary to set up your book, customize its content, and make it accessible to others on the web.

# Installation

## Existing project

>In first part, we will focus on **publishing an existing documentation project** that is hosted on a repository. We will guide you through the steps necessary to take this pre-existing documentation and make it **accessible online**. By the end of this process, you will have your documentation live and ready for others to view and use.

### Your existing project

![](../../assets/images/img_jupyter/contentsansci.png)

Here are all the files in our project. To publish our documentation online, we need to add the `.gitlab-ci.yml` file. This file will provide the GitLab pipeline with **instructions** to **automatically build the pages** and set up the **necessary environment**.

### ADD .gitlab-ci.yml

To add the configuration file, we will open the online IDE provided by GitLab.

![](../../assets/images/img_jupyter/ouvertureIDEligne.png)

:::::: {.columns}
::: {.column width="50%"}

Once the IDE is open, you should see the list of files and directories that make up your project.

![](../../assets/images/img_jupyter/creationfichiergitlab-ci.png)

:::

::: {.column width="10%"}
:::

::: {.column width="40%"}

At the root of this project, we will create the .gitlab-ci.yml file.

![](../../assets/images/img_jupyter/syntaxefichier.png)

:::
:::

### ADD .gitlab-ci.yml's content

Once the file is created, you need to add the following code:

```{python}
#| eval: false
---
include:
    - project: dev-ops/templates/automatisation/ci-cd
      ref: main
      file: /templates/pipeline-documentation-jupyterbook.yml

variables:
  DOCUMENTATION_PYTHON_REQUIREMENTS: "requirements.txt"
```

### Update the repository

Once the content is added, simply push the changes to update the repository.

![](../../assets/images/img_jupyter/pushdesmodifications.png)

Now our repository is up to date! We can see our `.gitlab-ci.yml` file.

![](../../assets/images/img_jupyter/contentavecCi.png)

### Pipelines

Once our repository is updated, GitLab will interpret our file and execute the configured steps. We can monitor the successful execution of these steps through the pipelines, which will run automatically. In our case, the pipeline will create an environment, install dependencies, build our Jupyter Notebook, and finally, publish our book.

:::::: {.columns}
::: {.column width="20%"}

![](../../assets/images/img_jupyter/menupipeline.png)

:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

![](../../assets/images/img_jupyter/pipelineencours.png)

:::
:::

After about 1-2 minutes, the pipeline should be complete. We can check the visual indicators to confirm its successful execution.

![](../../assets/images/img_jupyter/pipelineok.png)

### Gitlab pages

if the pipeline execution encountered no errors, our Jupyter Notebook has been successfully published. We can now verify that it is online by visiting the book via the link provided by GitLab Pages.

![](../../assets/images/img_jupyter/gitlabpages.png)

By clicking on GitLab Pages, you should be redirected to your published book. For more settings related to the creation of the URL, you can navigate to the GitLab Pages section from the side menu.

:::::: {.columns}
::: {.column width="20%"}

![](../../assets/images/img_jupyter/menupages.png)

:::

::: {.column width="5%"}
:::

::: {.column width="75%"}

![](../../assets/images/img_jupyter/lienpages.png)

:::
:::

## New Project clone from Template jupyter-book GitLab

# Jupyter-Notebook's Structure

```
.
├── assets
│   └── images
│       ├── favicon.ico
│       └── logo.png
├── build
│   ├── html
│   │   └── html Files
│   │       └── ...
│   └── jupyter_execute
│       └── .ipynb Files
│           └── ...
├── docs
│   ├── firstPart
│   │   ├── markdown-notebooks.md
│   │   └── markdown.md
│   ├── secondPart
│   │   └── notebooks.ipynb
│   └── intro.md
├── _config.yml
├── _toc.yml
├── .gitignore
├── .gitlab-ci.yml
├── references.bib
└── requirements.txt
```

## assets

```
.
├── assets
│   └── images
│       ├── favicon.ico
│       └── logo.png
[...]
```

>the `assets` directory serves as the main storage location for media.
>It contains one subdirectorie:

- **images**: This folder holds all the `image files` used in the project. Any **visual elements** that need to be displayed within the notebook or across the project are stored here.

## _build

```
[...]
├── build
│   ├── html
│   │   └── html Files
│   │       └── ...
│   └── jupyter_execute
│       └── .ipynb Files
│           └── ...
[...]
```

>The `_build` directory contains the **compiled versions** of the project in various formats, facilitating **different types of outputs**.
>Inside this directory, you will find two key subdirectories:

- **html**: This folder contains the project rendered in **HTML format**. It is the **web-ready version of the project**, allowing for easy navigation and sharing in a web browser.

- **jupyter_execute**: This folder holds all the **executable .ipynb files**. These are the Jupyter Notebook files that have been executed within their environment, containing both the **code** and the **output** from running the notebook cells.

The `_build` directory helps in **organizing the project’s outputs**, making it easy to access both the HTML version for viewing and the executable files for further development or execution.

## docs

```
[...]
├── docs
│   ├── firstPart
│   │   ├── markdown-notebooks.md
│   │   └── markdown.md
│   ├── secondPart
│   │   └── notebooks.ipynb
│   └── intro.md
[...]
```

> The `docs` directory serves as the **main content repository** for the project, housing all the **pages** and **sections** that make up the website or documentation. This directory contains the following elements:

- **firstPart** and **secondPart**: These subdirectories represent different **sections** or **parts** of the project, and they contain the **pages relevant** to each part. Each subdirectory organizes related content, making it easier to **structure** and **navigate** through the project.

- **intro.md**: It is key markdown files. intro.md typically serves as the introduction page of the project.

The docs directory can include files in various formats, primarily `.md`(Markdown) and ``.ipynb`` (Jupyter Notebook). These files make up the different pages of the web-based project, whether in **text** form or **including code** and outputs from notebooks.

This directory ensures that all the content displayed on the website is **well-organized** and **easily** accessible.

## _config.yml

```
├── _config.yml
```

>The `_config.yml` file plays a central role in **configuring your Jupyter Book project**. It allows you to define critical settings for the book's **appearance**, **content execution**, **citation** **management**, **PDF output**, and integration with **online repositories**. Let’s break down each section for more detail.

### Title and Author

```yaml
title: My sample book
author: The Jupyter Book Community
logo: ./assets/images/logo.png
```
- **title**: The title of your book, which will appear at the top of every page and in the site’s metadata. It helps identify the book clearly.

- **author**: The name of the author or group responsible for the book's content. This helps to credit the creators.

- **logo**: The path to an image used as the logo for the site. This image typically appears in the header on each page.

### Notebook Execution

```yaml
execute:
  execute_notebooks: force
```
- **execute_notebooks**: force: This forces the re-execution of all notebooks every time the book is built. It ensures that the displayed output is always up to date, but it can increase the build time if there are many notebooks to execute.

- Other possible options:

  - "**auto**": Only execute notebooks if they haven't been executed already.

  - "**off**": Disables notebook execution entirely during the build process.

### PDF Export via LaTeX

```yaml
latex:
  latex_documents:
    targetname: book.tex
```
- **latex_documents**: This setting defines the name of the LaTeX output file when generating a PDF version of your book. In this case, the file will be named book.tex. This is useful if you need to customize how your book is presented when exported to PDF format.

### Citation Management with BibTeX

```yaml
bibtex_bibfiles:
  - references.bib
```
- **bibtex_bibfiles**: This allows you to include BibTeX files for managing citations in the book. In this case, the references.bib file will be used to handle **academic references** or **citations** within the content. This is especially useful for **research-focused books** or **publications**.

### Online Repository Information

```yaml
repository:
  url: https://gitlab.ifremer.fr/dev-ops/templates/project/docs-jupyterbook
  branch: main
```
- **url**: The URL of the online repository hosting the project, in this case, a GitLab repository. This link can be displayed in the book, allowing users to **view the source code** or **contribute to the project**.

- **branch**: The repository branch that will be used for creating links in the book. Typically, main or master is used, but it can be customized based on your version control workflow.

### HTML Customization

```yaml
html:
  favicon: ./assets/images/favicon.ico
  use_issues_button: true
  use_repository_button: true
```
- **favicon**: The path to the favicon icon, which is displayed in the browser tab. This allows you to further customize the book’s appearance and add a branding element.

- **use_issues_button**: Enables the Issues button on the book's interface, which redirects users to the issue tracker on your repository. This makes it easier to manage feedback or bug reports from users.

- **use_repository_button**: Enables the Repository button, allowing users to quickly access the source code of your project. This encourages contributions or simply offers access to the repository.

Mastering this file will help you create a **well-organized**, **functional**, and **professional documentation project**.

## _toc.yml

```
├── _toc.yml
```

>The `_toc.yml` file is essential for defining the structure and navigation of your Jupyter Book. It organizes how content is displayed in the book, breaking it down into parts and chapters. Here's a simple explanation of the contents of this specific file:

### Key Components of _toc.yml

- **format**: jb-book: This specifies that the format of the book follows the Jupyter Book structure.
  - **Description**: This specifies that the format of the book follows the **Jupyter Book structure**. It informs the Jupyter Book system that it should render the content according to its specifications.

- **root**: docs/intro: This line sets the intro.md file (located in the docs directory) as the **root** or **homepage** of the book. It will be the first page that users see when they open the book.

- **parts**: This section is used to divide the book into **different parts or sections**. In this case, there are two parts:

```yaml
format: jb-book
root: docs/intro
parts:
  - caption: First Part
    chapters:
      - glob: docs/firstPart/*
  - caption: Seconde Part
    chapters:
      - glob: docs/secondPart/*
```
**globs**: Patterns that specify which files to **include**. For instance, docs/firstPart/* means that **all files** in the firstPart directory will be included as **chapters** in this part.

**individual files**: You can also list specific markdown files instead of using globs, like this:

```yaml
- file: docs/firstPart/chapter1.md
- file: docs/firstPart/chapter2.md
```

### Advanced Features of _toc.yml

#### Custom Titles and Captions:

- You can specify **custom titles** for sections or files using the `title` attribute, which can be helpful for clarity.

```yaml
- file: docs/firstPart/chapter1.md
  title: "Understanding Chapter 1"
```

#### Nested Sections:

- You can create a more complex hierarchy with **nested sections**, which can be useful for large books:

```yaml
- caption: "First Part"
  sections:
    - file: docs/firstPart/chapter1.md
    - caption: "Subsection"
      sections:
        - file: docs/firstPart/subsection1.md
```

#### Linking External Resources:

- You can link to external **resources or documents** to provide additional context or references:

```yaml
- caption: "External Resources"
  sections:
    - file: https://example.com/resource
```

### Importance of Navigation

By organizing the content into **parts** and **chapters**, the `_toc.yml` file controls how users will **navigate through your book**, ensuring a **clear** and **structured** presentation of the material. A well-structured `_toc.yml` enhances user experience by allowing readers to easily **find** and **access** the content they are interested in.

#### Best Practices for Using `_toc.yml`

- **Logical Organization**: Organize content in a **logical manner**, **grouping related topics together**.

- **Consistent Naming**: Use consistent naming conventions for files and sections to improve readability.

- **Regular Updates**: Keep the `_toc.yml` file updated as you **add** or **remove** content from your book.

- **Test Navigation**: After modifying the `_toc.yml`, **test** the navigation in the built book to ensure all links and sections work correctly.

## gitlab-ci.yml

```
├── .gitlab-ci.yml
```

>The `.gitlab-ci.yml` file is a configuration file used for **GitLab CI/CD pipelines**. It defines the instructions for how your project will be **built**, **tested**, and **deployed**. Here’s a breakdown of the contents of this specific file:

- **include**: This section allows you to include **external configuration templates** from other projects.

- **variables**: This section is used to define **environment variables** that can be used throughout the CI/CD pipeline. In this file, the variable DOCUMENTATION_PYTHON_REQUIREMENTS is set to "requirements.txt", indicating the file that contains the Python package requirements needed to build the documentation.

::: {.callout-warning title="Important"}
This file should **not be modified**, as any changes could disrupt the build and deployment process of the book online. It is crucial to maintain its integrity to ensure that the CI/CD pipeline operates correctly.
:::

By using this configuration file, you can **automate** tasks related to your Jupyter Book project, such as **installing** **dependencies**, **building** the **documentation**, and **deploying** it to a s**erver or hosting service**.

## references.bib

```
├── references.bib
```
>The `references.bib` file is a BibTeX file used to manage citations for your Jupyter Book project. It contains bibliographic entries for various academic works, allowing you to cite these sources throughout your book easily.

::: {.callout-note collapse="true"}
## More about references.bib structure:
- Bibliographic Entry Structure: Each entry in the file represents a different source and follows a specific format. For example, here’s an entry for a journal article:

```bibtex
@article{holdgraf_rapid_2016,
    title = {Rapid tuning shifts in human auditory cortex enhance speech intelligibility},
    volume = {7},
    issn = {2041-1723},
    url = {http://www.nature.com/doifinder/10.1038/ncomms13654},
    doi = {10.1038/ncomms13654},
    number = {May},
    journal = {Nature Communications},
    author = {Holdgraf, Christopher Ramsay and de Heer, Wendy and Pasley, Brian N. and Rieger, Jochem W. and Crone, Nathan and Lin, Jack J. and Knight, Robert T. and Theunissen, Frédéric E.},
    year = {2016},
    pages = {13654},
    file = {Holdgraf et al. - 2016 - Rapid tuning shifts in human auditory cortex enhance speech intelligibility.pdf:C\:\\Users\\chold\\Zotero\\storage\\MDQP3JWE\\Holdgraf et al. - 2016 - Rapid tuning shifts in human auditory cortex
    enhance speech intelligibility.pdf:application/pdf}
}
```

- Key Components of the Entry:

- **@article**: This indicates the type of the bibliographic entry (in this case, an article).
- **Citation Key**: holdgraf_rapid_2016 serves as a unique identifier for this entry, allowing it to be cited in your book.
- **title**: The title of the article.
- **author**: The list of authors of the article, formatted as "Last Name, First Name".
- **year**: The year of publication.
- **journal**: The name of the journal where the article was published.
- **volume**, number, pages: Additional details about the publication, such as volume number, issue number, and page range.
- **url and doi**: Links to access the article online.
- **file**: A path to a local copy of the article (if applicable).
:::

The `references.bib` file plays a crucial role in ensuring that all academic references are well-organized and easily accessible for citation throughout your Jupyter Book project. When you reference an entry in your content, it will automatically format the citation according to the specified style.

## requirements.txt

```
└── requirements.txt
```

In Python projects, there are several files that can be used to **manage dependencies**, each serving different purposes and working with different tools. While your project might only use **requirements.txt**, it is important to also understand other files like **environment.yaml** and **pyproject.toml**, as you might encounter them in other contexts. Below is an explanation of these three files.

### requirements.txt

>The `requirements.txt` file is a standard file used in Python projects to specify the **dependencies required** to run the project. This file lists all the external libraries and packages that need to be installed to ensure that your **Jupyter Book functions correctly**.

::: {.callout-note collapse="true"}
## More about requirements.txt structure:
Below is a simple explanation of the contents of this specific file:

- **Dependencies**: Each line in the requirements.txt file represents a **package** that your **project** **requires**. Here’s an example of what the content might look like:

```rust
jupyter-book
matplotlib
numpy
ipyleaflet
plotly
pandas
```

**Key Packages Explained**:

- **jupyter-book**: The primary package needed to build and publish the Jupyter Book.

- **matplotlib**: A widely-used plotting library for creating static, animated, and interactive visualizations in Python.

- **numpy**: A fundamental package for numerical computing in Python, essential for handling arrays and performing mathematical operations.

- **ipyleaflet**: A library that provides interactive maps for Jupyter notebooks, useful for geographical data visualization.

- **plotly**: A graphing library that makes interactive plots, dashboards, and web applications.

- **pandas**: A powerful data manipulation and analysis library that provides data structures like DataFrames.
:::

### environment.yaml

>In contrast to `requirements.txt`, which is used with pip, the environment.yaml file is used with **conda**, another popular Python **environment manager**, especially in data science.

::: {.callout-note collapse="true"}
## More about environment.yaml structure:
Below is a simple explanation of the contents of this specific file:

```rust
name: my_environment
channels:
  - defaults
  - conda-forge
dependencies:
  - python=3.9
  - jupyter-book
  - matplotlib
  - numpy
  - ipyleaflet
  - plotly
  - pandas
  - pip
  - pip:
    - some-pip-only-package
```

**Key Packages Explained**:

- **name**: The name of the conda environment.

- **channels**: Specifies where conda will look for packages.

- **dependencies**: A list of dependencies to install, including both Python libraries and other non-Python tools.

- **pip**: If some dependencies are not available through conda, they can be installed via pip inside the file.
:::

### pyproject.toml

>The `pyproject.toml` file is a new method introduced by PEP 518 to define the **metadata and dependencies of a Python project**, especially for projects that use modern build tools like **Poetry** or **Flit**.

::: {.callout-note collapse="true"}
## More about pyproject.toml structure:
Below is a simple explanation of the contents of this specific file:

```rust
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.poetry]
name = "my_project"
version = "0.1.0"
description = "A Python project."
authors = ["Author <author@example.com>"]

[tool.poetry.dependencies]
python = "^3.9"
jupyter-book = "^0.11"
matplotlib = "^3.4"
numpy = "^1.21"
ipyleaflet = "^0.14"
plotly = "^5.0"
pandas = "^1.3"

[tool.poetry.dev-dependencies]
pytest = "^6.2"
black = "^21.7b0"
```

**Key Packages Explained**:

- **[build-system]**: Defines the required build tools, such as **setuptools** and **wheel**.

- **[tool.poetry]**: Information about the project, including the name, version, and authors.

- **[tool.poetry.dependencies]**: List of dependencies required to run the project.

- **[tool.poetry.dev-dependencies]**: List of dependencies required for development (testing, linting, etc.).
:::

### **Comparison of `requirements.txt`, `environment.yaml`, and `pyproject.toml` Files:**

| Feature                  | `requirements.txt`       | `environment.yaml`  | `pyproject.toml`   |
|--------------------------|--------------------------|---------------------|--------------------|
| **Manager**              | pip                      | conda               | Poetry/Flit        |
| **Environment**          | Python                   | Multi-language      | Python             |
| **Version Support**      | Yes, manual              | Yes, precise        | Yes, automatic     |
| **Channel Usage**        | No                       | Yes (conda-forge)   | No                 |
| **Dev Dependencies**     | No, requires another file| Yes                 | Yes                |
